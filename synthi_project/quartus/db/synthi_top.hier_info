|synthi_top
CLOCK_50 => infrastructure:infrastructure_1.clock_50
KEY_0 => infrastructure:infrastructure_1.key_0
KEY_1 => ~NO_FANOUT~
SW[0] => ~NO_FANOUT~
SW[1] => ~NO_FANOUT~
SW[2] => ~NO_FANOUT~
SW[3] => ~NO_FANOUT~
SW[4] => ~NO_FANOUT~
SW[5] => ~NO_FANOUT~
SW[6] => ~NO_FANOUT~
SW[7] => ~NO_FANOUT~
SW[8] => ~NO_FANOUT~
SW[9] => ~NO_FANOUT~
USB_RXD => ~NO_FANOUT~
USB_TXD => infrastructure:infrastructure_1.usb_txd
BT_RXD => ~NO_FANOUT~
BT_TXD => ~NO_FANOUT~
BT_RST_N => ~NO_FANOUT~
AUD_XCK << AUD_XCK.DB_MAX_OUTPUT_PORT_TYPE
AUD_DACDAT << AUD_DACDAT.DB_MAX_OUTPUT_PORT_TYPE
AUD_BCLK << AUD_BCLK.DB_MAX_OUTPUT_PORT_TYPE
AUD_DACLRCK << AUD_DACLRCK.DB_MAX_OUTPUT_PORT_TYPE
AUD_ADCLRCK << AUD_ADCLRCK.DB_MAX_OUTPUT_PORT_TYPE
AUD_ADCDAT => ~NO_FANOUT~
AUD_SCLK << AUD_SCLK.DB_MAX_OUTPUT_PORT_TYPE
AUD_SDAT <> <UNC>
HEX0[0] << uart_top:uart_top_1.hex0[0]
HEX0[1] << uart_top:uart_top_1.hex0[1]
HEX0[2] << uart_top:uart_top_1.hex0[2]
HEX0[3] << uart_top:uart_top_1.hex0[3]
HEX0[4] << uart_top:uart_top_1.hex0[4]
HEX0[5] << uart_top:uart_top_1.hex0[5]
HEX0[6] << uart_top:uart_top_1.hex0[6]
HEX1[0] << uart_top:uart_top_1.hex1[0]
HEX1[1] << uart_top:uart_top_1.hex1[1]
HEX1[2] << uart_top:uart_top_1.hex1[2]
HEX1[3] << uart_top:uart_top_1.hex1[3]
HEX1[4] << uart_top:uart_top_1.hex1[4]
HEX1[5] << uart_top:uart_top_1.hex1[5]
HEX1[6] << uart_top:uart_top_1.hex1[6]
LEDR_0 << infrastructure:infrastructure_1.ledr_0
LEDR_1 << LEDR_1.DB_MAX_OUTPUT_PORT_TYPE
LEDR_2 << LEDR_2.DB_MAX_OUTPUT_PORT_TYPE
LEDR_3 << LEDR_3.DB_MAX_OUTPUT_PORT_TYPE
LEDR_4 << LEDR_4.DB_MAX_OUTPUT_PORT_TYPE
LEDR_5 << LEDR_5.DB_MAX_OUTPUT_PORT_TYPE
LEDR_6 << LEDR_6.DB_MAX_OUTPUT_PORT_TYPE
LEDR_7 << LEDR_7.DB_MAX_OUTPUT_PORT_TYPE
LEDR_8 << LEDR_8.DB_MAX_OUTPUT_PORT_TYPE
LEDR_9 << comb.DB_MAX_OUTPUT_PORT_TYPE


|synthi_top|infrastructure:infrastructure_1
clock_50 => modulo_divider:modulo_divider_1.clk
clock_50 => signal_checker:signal_checker_1.clk
key_0 => clock_sync:clock_sync_1.data_in
key_0 => signal_checker:signal_checker_1.reset_n
usb_txd => clock_sync:clock_sync_2.data_in
usb_txd => signal_checker:signal_checker_1.data_in
clk_6m <= modulo_divider:modulo_divider_1.clk_6m
reset_n <= clock_sync:clock_sync_1.sync_out
usb_txd_sync <= clock_sync:clock_sync_2.sync_out
ledr_0 <= signal_checker:signal_checker_1.led_blink


|synthi_top|infrastructure:infrastructure_1|modulo_divider:modulo_divider_1
clk => count[0].CLK
clk => count[1].CLK
clk => count[2].CLK
clk_6m <= count[2].DB_MAX_OUTPUT_PORT_TYPE


|synthi_top|infrastructure:infrastructure_1|clock_sync:clock_sync_1
data_in => q_0.DATAIN
clk => q_1.CLK
clk => q_0.CLK
sync_out <= q_1.DB_MAX_OUTPUT_PORT_TYPE


|synthi_top|infrastructure:infrastructure_1|clock_sync:clock_sync_2
data_in => q_0.DATAIN
clk => q_1.CLK
clk => q_0.CLK
sync_out <= q_1.DB_MAX_OUTPUT_PORT_TYPE


|synthi_top|infrastructure:infrastructure_1|signal_checker:signal_checker_1
clk => pulse_count[0].CLK
clk => pulse_count[1].CLK
clk => pulse_count[2].CLK
clk => pulse_count[3].CLK
clk => pulse_count[4].CLK
clk => pulse_count[5].CLK
clk => pulse_count[6].CLK
clk => pulse_count[7].CLK
clk => sync_q3.CLK
clk => sync_q2.CLK
clk => sync_q1.CLK
clk => bit_count_i[0].CLK
clk => bit_count_i[1].CLK
clk => bit_count_i[2].CLK
clk => bit_count_i[3].CLK
clk => bit_count_i[4].CLK
clk => bit_count_i[5].CLK
clk => bit_count_i[6].CLK
clk => bit_count_i[7].CLK
clk => bit_count_i[8].CLK
clk => bit_count_i[9].CLK
clk => bit_count_i[10].CLK
clk => bit_count_i[11].CLK
clk => bit_count_i[12].CLK
clk => bit_count_i[13].CLK
clk => bit_count_i[14].CLK
clk => bit_count_i[15].CLK
clk => bit_count_i[16].CLK
clk => bit_count_i[17].CLK
clk => bit_count_i[18].CLK
clk => bit_count_i[19].CLK
clk => bit_count_i[20].CLK
clk => bit_count_i[21].CLK
clk => bit_count_i[22].CLK
reset_n => pulse_count[0].ACLR
reset_n => pulse_count[1].ACLR
reset_n => pulse_count[2].ACLR
reset_n => pulse_count[3].ACLR
reset_n => pulse_count[4].ACLR
reset_n => pulse_count[5].ACLR
reset_n => pulse_count[6].ACLR
reset_n => pulse_count[7].ACLR
reset_n => sync_q3.PRESET
reset_n => sync_q2.PRESET
reset_n => sync_q1.PRESET
reset_n => bit_count_i[0].ACLR
reset_n => bit_count_i[1].ACLR
reset_n => bit_count_i[2].ACLR
reset_n => bit_count_i[3].ACLR
reset_n => bit_count_i[4].ACLR
reset_n => bit_count_i[5].ACLR
reset_n => bit_count_i[6].ACLR
reset_n => bit_count_i[7].ACLR
reset_n => bit_count_i[8].ACLR
reset_n => bit_count_i[9].ACLR
reset_n => bit_count_i[10].ACLR
reset_n => bit_count_i[11].ACLR
reset_n => bit_count_i[12].ACLR
reset_n => bit_count_i[13].ACLR
reset_n => bit_count_i[14].ACLR
reset_n => bit_count_i[15].ACLR
reset_n => bit_count_i[16].ACLR
reset_n => bit_count_i[17].ACLR
reset_n => bit_count_i[18].ACLR
reset_n => bit_count_i[19].ACLR
reset_n => bit_count_i[20].ACLR
reset_n => bit_count_i[21].ACLR
reset_n => bit_count_i[22].ACLR
data_in => sync_q1.DATAIN
led_blink <= bit_count_i[22].DB_MAX_OUTPUT_PORT_TYPE


|synthi_top|uart_top:uart_top_1
clk_6m => flanken_detekt_vhdl:flanken_detekt_vhdl_inst1.clock
clk_6m => baud_tick:baud_tick_inst1.clk
clk_6m => bit_counter:bit_counter_inst1.clk
clk_6m => uart_controller_fsm:uart_controller_fsm_inst1.clk
clk_6m => shiftreg_uart:shiftreg_uart_inst1.clk
clk_6m => output_register:output_register_inst1.clk
reset_n => flanken_detekt_vhdl:flanken_detekt_vhdl_inst1.reset_n
reset_n => baud_tick:baud_tick_inst1.reset_n
reset_n => bit_counter:bit_counter_inst1.reset_n
reset_n => uart_controller_fsm:uart_controller_fsm_inst1.reset_n
reset_n => shiftreg_uart:shiftreg_uart_inst1.reset_n
reset_n => output_register:output_register_inst1.reset_n
serial_in => flanken_detekt_vhdl:flanken_detekt_vhdl_inst1.data_in
serial_in => shiftreg_uart:shiftreg_uart_inst1.serial_in
rx_data_rdy <= uart_controller_fsm:uart_controller_fsm_inst1.data_valid
rx_data[0] <= shiftreg_uart:shiftreg_uart_inst1.parallel_out[1]
rx_data[1] <= shiftreg_uart:shiftreg_uart_inst1.parallel_out[2]
rx_data[2] <= shiftreg_uart:shiftreg_uart_inst1.parallel_out[3]
rx_data[3] <= shiftreg_uart:shiftreg_uart_inst1.parallel_out[4]
rx_data[4] <= shiftreg_uart:shiftreg_uart_inst1.parallel_out[5]
rx_data[5] <= shiftreg_uart:shiftreg_uart_inst1.parallel_out[6]
rx_data[6] <= shiftreg_uart:shiftreg_uart_inst1.parallel_out[7]
rx_data[7] <= shiftreg_uart:shiftreg_uart_inst1.parallel_out[8]
hex0[0] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst1.seg_out[0]
hex0[1] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst1.seg_out[1]
hex0[2] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst1.seg_out[2]
hex0[3] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst1.seg_out[3]
hex0[4] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst1.seg_out[4]
hex0[5] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst1.seg_out[5]
hex0[6] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst1.seg_out[6]
hex1[0] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst2.seg_out[0]
hex1[1] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst2.seg_out[1]
hex1[2] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst2.seg_out[2]
hex1[3] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst2.seg_out[3]
hex1[4] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst2.seg_out[4]
hex1[5] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst2.seg_out[5]
hex1[6] <= vhdl_hex2sevseg:vhdl_hex2sevseg_inst2.seg_out[6]


|synthi_top|uart_top:uart_top_1|flanken_detekt_vhdl:flanken_detekt_vhdl_inst1
data_in => q1.DATAIN
clock => q2.CLK
clock => q1.CLK
reset_n => q2.ACLR
reset_n => q1.ACLR
fl_steigend <= fl_steigend.DB_MAX_OUTPUT_PORT_TYPE
fl_fallend <= fl_fallend.DB_MAX_OUTPUT_PORT_TYPE


|synthi_top|uart_top:uart_top_1|vhdl_hex2sevseg:vhdl_hex2sevseg_inst1
data_in[0] => Mux0.IN19
data_in[0] => Mux1.IN19
data_in[0] => Mux2.IN19
data_in[0] => Mux3.IN19
data_in[0] => Mux4.IN19
data_in[0] => Mux5.IN19
data_in[0] => Mux6.IN19
data_in[1] => Mux0.IN18
data_in[1] => Mux1.IN18
data_in[1] => Mux2.IN18
data_in[1] => Mux3.IN18
data_in[1] => Mux4.IN18
data_in[1] => Mux5.IN18
data_in[1] => Mux6.IN18
data_in[2] => Mux0.IN17
data_in[2] => Mux1.IN17
data_in[2] => Mux2.IN17
data_in[2] => Mux3.IN17
data_in[2] => Mux4.IN17
data_in[2] => Mux5.IN17
data_in[2] => Mux6.IN17
data_in[3] => Mux0.IN16
data_in[3] => Mux1.IN16
data_in[3] => Mux2.IN16
data_in[3] => Mux3.IN16
data_in[3] => Mux4.IN16
data_in[3] => Mux5.IN16
data_in[3] => Mux6.IN16
seg_out[0] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
seg_out[1] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
seg_out[2] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
seg_out[3] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
seg_out[4] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
seg_out[5] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
seg_out[6] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|synthi_top|uart_top:uart_top_1|vhdl_hex2sevseg:vhdl_hex2sevseg_inst2
data_in[0] => Mux0.IN19
data_in[0] => Mux1.IN19
data_in[0] => Mux2.IN19
data_in[0] => Mux3.IN19
data_in[0] => Mux4.IN19
data_in[0] => Mux5.IN19
data_in[0] => Mux6.IN19
data_in[1] => Mux0.IN18
data_in[1] => Mux1.IN18
data_in[1] => Mux2.IN18
data_in[1] => Mux3.IN18
data_in[1] => Mux4.IN18
data_in[1] => Mux5.IN18
data_in[1] => Mux6.IN18
data_in[2] => Mux0.IN17
data_in[2] => Mux1.IN17
data_in[2] => Mux2.IN17
data_in[2] => Mux3.IN17
data_in[2] => Mux4.IN17
data_in[2] => Mux5.IN17
data_in[2] => Mux6.IN17
data_in[3] => Mux0.IN16
data_in[3] => Mux1.IN16
data_in[3] => Mux2.IN16
data_in[3] => Mux3.IN16
data_in[3] => Mux4.IN16
data_in[3] => Mux5.IN16
data_in[3] => Mux6.IN16
seg_out[0] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
seg_out[1] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
seg_out[2] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
seg_out[3] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
seg_out[4] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
seg_out[5] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
seg_out[6] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|synthi_top|uart_top:uart_top_1|baud_tick:baud_tick_inst1
clk => count[0].CLK
clk => count[1].CLK
clk => count[2].CLK
clk => count[3].CLK
clk => count[4].CLK
clk => count[5].CLK
reset_n => count[0].ACLR
reset_n => count[1].ACLR
reset_n => count[2].ACLR
reset_n => count[3].ACLR
reset_n => count[4].ACLR
reset_n => count[5].ACLR
start_pulse => next_count[5].OUTPUTSELECT
start_pulse => next_count[4].OUTPUTSELECT
start_pulse => next_count[3].OUTPUTSELECT
start_pulse => next_count[2].OUTPUTSELECT
start_pulse => next_count[1].OUTPUTSELECT
start_pulse => next_count[0].OUTPUTSELECT
start_pulse => tick.OUTPUTSELECT
tick <= tick.DB_MAX_OUTPUT_PORT_TYPE


|synthi_top|uart_top:uart_top_1|bit_counter:bit_counter_inst1
clk => count[0].CLK
clk => count[1].CLK
clk => count[2].CLK
clk => count[3].CLK
reset_n => count[0].ACLR
reset_n => count[1].ACLR
reset_n => count[2].ACLR
reset_n => count[3].ACLR
baud_tick => comb_logic.IN1
start_pulse => next_count[3].OUTPUTSELECT
start_pulse => next_count[2].OUTPUTSELECT
start_pulse => next_count[1].OUTPUTSELECT
start_pulse => next_count[0].OUTPUTSELECT
bit_count[0] <= count[0].DB_MAX_OUTPUT_PORT_TYPE
bit_count[1] <= count[1].DB_MAX_OUTPUT_PORT_TYPE
bit_count[2] <= count[2].DB_MAX_OUTPUT_PORT_TYPE
bit_count[3] <= count[3].DB_MAX_OUTPUT_PORT_TYPE


|synthi_top|uart_top:uart_top_1|uart_controller_fsm:uart_controller_fsm_inst1
clk => fsm_state~1.DATAIN
reset_n => fsm_state~3.DATAIN
falling_pulse => next_fsm_state.OUTPUTSELECT
falling_pulse => next_fsm_state.OUTPUTSELECT
falling_pulse => next_fsm_state.OUTPUTSELECT
falling_pulse => next_fsm_state.OUTPUTSELECT
baud_tick => state_logic.IN1
baud_tick => shift_enable.DATAB
bit_count[0] => Equal0.IN3
bit_count[1] => Equal0.IN1
bit_count[2] => Equal0.IN0
bit_count[3] => Equal0.IN2
parallel_data[0] => fsm_out_logic.IN0
parallel_data[1] => ~NO_FANOUT~
parallel_data[2] => ~NO_FANOUT~
parallel_data[3] => ~NO_FANOUT~
parallel_data[4] => ~NO_FANOUT~
parallel_data[5] => ~NO_FANOUT~
parallel_data[6] => ~NO_FANOUT~
parallel_data[7] => ~NO_FANOUT~
parallel_data[8] => ~NO_FANOUT~
parallel_data[9] => fsm_out_logic.IN1
shift_enable <= shift_enable.DB_MAX_OUTPUT_PORT_TYPE
start_pulse <= start_pulse.DB_MAX_OUTPUT_PORT_TYPE
data_valid <= data_valid.DB_MAX_OUTPUT_PORT_TYPE


|synthi_top|uart_top:uart_top_1|shiftreg_uart:shiftreg_uart_inst1
clk => shiftreg[0].CLK
clk => shiftreg[1].CLK
clk => shiftreg[2].CLK
clk => shiftreg[3].CLK
clk => shiftreg[4].CLK
clk => shiftreg[5].CLK
clk => shiftreg[6].CLK
clk => shiftreg[7].CLK
clk => shiftreg[8].CLK
clk => shiftreg[9].CLK
reset_n => shiftreg[0].ACLR
reset_n => shiftreg[1].ACLR
reset_n => shiftreg[2].ACLR
reset_n => shiftreg[3].ACLR
reset_n => shiftreg[4].ACLR
reset_n => shiftreg[5].ACLR
reset_n => shiftreg[6].ACLR
reset_n => shiftreg[7].ACLR
reset_n => shiftreg[8].ACLR
reset_n => shiftreg[9].ACLR
shift_enable => shiftreg[9].ENA
shift_enable => shiftreg[8].ENA
shift_enable => shiftreg[7].ENA
shift_enable => shiftreg[6].ENA
shift_enable => shiftreg[5].ENA
shift_enable => shiftreg[4].ENA
shift_enable => shiftreg[3].ENA
shift_enable => shiftreg[2].ENA
shift_enable => shiftreg[1].ENA
shift_enable => shiftreg[0].ENA
serial_in => shiftreg[9].DATAIN
parallel_out[0] <= shiftreg[0].DB_MAX_OUTPUT_PORT_TYPE
parallel_out[1] <= shiftreg[1].DB_MAX_OUTPUT_PORT_TYPE
parallel_out[2] <= shiftreg[2].DB_MAX_OUTPUT_PORT_TYPE
parallel_out[3] <= shiftreg[3].DB_MAX_OUTPUT_PORT_TYPE
parallel_out[4] <= shiftreg[4].DB_MAX_OUTPUT_PORT_TYPE
parallel_out[5] <= shiftreg[5].DB_MAX_OUTPUT_PORT_TYPE
parallel_out[6] <= shiftreg[6].DB_MAX_OUTPUT_PORT_TYPE
parallel_out[7] <= shiftreg[7].DB_MAX_OUTPUT_PORT_TYPE
parallel_out[8] <= shiftreg[8].DB_MAX_OUTPUT_PORT_TYPE
parallel_out[9] <= shiftreg[9].DB_MAX_OUTPUT_PORT_TYPE


|synthi_top|uart_top:uart_top_1|output_register:output_register_inst1
clk => hex_out[1].CLK
clk => hex_out[2].CLK
clk => hex_out[3].CLK
clk => hex_out[4].CLK
clk => hex_out[5].CLK
clk => hex_out[6].CLK
clk => hex_out[7].CLK
clk => hex_out[8].CLK
reset_n => hex_out[1].ACLR
reset_n => hex_out[2].ACLR
reset_n => hex_out[3].ACLR
reset_n => hex_out[4].ACLR
reset_n => hex_out[5].ACLR
reset_n => hex_out[6].ACLR
reset_n => hex_out[7].ACLR
reset_n => hex_out[8].ACLR
data_valid => hex_out[8].ENA
data_valid => hex_out[7].ENA
data_valid => hex_out[6].ENA
data_valid => hex_out[5].ENA
data_valid => hex_out[4].ENA
data_valid => hex_out[3].ENA
data_valid => hex_out[2].ENA
data_valid => hex_out[1].ENA
parallel_in[0] => ~NO_FANOUT~
parallel_in[1] => hex_out[1].DATAIN
parallel_in[2] => hex_out[2].DATAIN
parallel_in[3] => hex_out[3].DATAIN
parallel_in[4] => hex_out[4].DATAIN
parallel_in[5] => hex_out[5].DATAIN
parallel_in[6] => hex_out[6].DATAIN
parallel_in[7] => hex_out[7].DATAIN
parallel_in[8] => hex_out[8].DATAIN
parallel_in[9] => ~NO_FANOUT~
hex_lsb[0] <= hex_out[1].DB_MAX_OUTPUT_PORT_TYPE
hex_lsb[1] <= hex_out[2].DB_MAX_OUTPUT_PORT_TYPE
hex_lsb[2] <= hex_out[3].DB_MAX_OUTPUT_PORT_TYPE
hex_lsb[3] <= hex_out[4].DB_MAX_OUTPUT_PORT_TYPE
hex_msb[0] <= hex_out[5].DB_MAX_OUTPUT_PORT_TYPE
hex_msb[1] <= hex_out[6].DB_MAX_OUTPUT_PORT_TYPE
hex_msb[2] <= hex_out[7].DB_MAX_OUTPUT_PORT_TYPE
hex_msb[3] <= hex_out[8].DB_MAX_OUTPUT_PORT_TYPE


